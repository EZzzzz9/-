import streamlit as st
import pandas as pd

st.set_page_config(page_title="–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –æ—à–∏–±–∫–∞–º")

# üîÅ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
defaults = {
    "step": 0,
    "score": 0,
    "answers": [],
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None,
    "df_full": None,
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–∞
st.markdown("### üìò –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏")
uploaded_excel = st.file_uploader("Excel (.xlsx)", type=["xlsx"], key="excel")

if uploaded_excel:
    try:
        df_full = pd.read_excel(uploaded_excel, sheet_name=0)
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
        df_full["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"] = df_full["–í–æ–ø—Ä–æ—Å"].astype(str).str.strip().str.lower()
        st.session_state.df_full = df_full.copy()
        st.success("‚úÖ Excel-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ Excel: {e}")
        st.stop()

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞
st.markdown("### üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏")
uploaded_csv = st.file_uploader("CSV (.csv)", type=["csv"], key="csv")

if uploaded_csv and st.session_state.df_full is not None:
    try:
        df_errors = pd.read_csv(uploaded_csv)
        if "–í–æ–ø—Ä–æ—Å" not in df_errors.columns:
            st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É '–í–æ–ø—Ä–æ—Å'")
            st.stop()

        df_errors["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"] = df_errors["–í–æ–ø—Ä–æ—Å"].astype(str).str.strip().str.lower()
        df_full = st.session_state.df_full.copy()
        df_matched = df_full[df_full["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"].isin(df_errors["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"])]

        if df_matched.empty:
            st.error("‚ùå –ù–∏ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–∑ CSV –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel.")
            st.stop()

        st.session_state.current_df = df_matched.reset_index(drop=True)
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df_matched)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ CSV –≤ Excel.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ CSV: {e}")
        st.stop()

# üëâ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
df = st.session_state.current_df
if df is not None and not df.empty:
    current_step = st.session_state.step
    total_questions = len(df)

    st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")

    # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –∏–∑ 18 –∫–ª–µ—Ç–æ–∫
    BAR_CELLS = 18
    html_bar = '<div style="display: flex; gap: 2px;">'
    for i in range(BAR_CELLS):
        rel_idx = int(i / BAR_CELLS * total_questions)
        if rel_idx >= total_questions:
            color = "black"
        else:
            q_index = df.iloc[rel_idx].name
            answer = next((a for a in st.session_state.answers if a["–ò–Ω–¥–µ–∫—Å"] == q_index), None)
            color = "green" if answer and answer["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ" else "red" if answer else "black"
        html_bar += f'<div style="width: 20px; height: 20px; background-color: {color}; border: 1px solid #555;"></div>'
    html_bar += '</div>'
    st.markdown(html_bar, unsafe_allow_html=True)

    correct_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ")
    wrong_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")
    st.markdown(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count} | ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {wrong_count} | ‚¨õ –û—Å—Ç–∞–ª–æ—Å—å: {total_questions - (correct_count + wrong_count)}")

    # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if current_step < total_questions:
        row = df.iloc[current_step]
        st.markdown(f"### {row['–í–æ–ø—Ä–æ—Å']}")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            [f"{opt}) {text}" for opt, text in valid_options],
            key=f"q_{current_step}"
        )

        if not st.session_state.show_result:
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                selected_letter = selected[0]
                is_correct = selected_letter == correct_answer
                st.session_state.selected_option = selected_letter
                st.session_state.last_result = is_correct
                st.session_state.answers.append({
                    "–ò–Ω–¥–µ–∫—Å": row.name,
                    "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏": selected_letter,
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                })
                if is_correct:
                    st.session_state.score += 1
                st.session_state.show_result = True
                st.rerun()

        else:
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.step += 1
                st.session_state.show_result = False
                st.session_state.selected_option = None
                st.session_state.last_result = None
                st.rerun()

            if st.session_state.last_result:
                st.markdown("‚úÖ **–í–µ—Ä–Ω–æ!**")
            else:
                st.markdown(f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}**")

    elif current_step >= total_questions:
        st.success("üéâ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total_questions}**")

        with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            df_result = pd.DataFrame(st.session_state.answers)
            st.dataframe(df_result[["–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])

else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏ CSV, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
