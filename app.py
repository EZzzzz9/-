import streamlit as st
import pandas as pd
from io import StringIO

st.set_page_config(page_title="–¢–µ—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä—É—á–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º")

# üîÑ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
defaults = {
    "mode": "full_test",
    "step": 0,
    "score": 0,
    "answers": [],
    "finished": False,
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None,
    "df_full": None
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df_full = pd.read_excel(uploaded_file, sheet_name="Sheet1")
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
        st.session_state.df_full = df_full
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.stop()

    with st.expander("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        st.dataframe(df_full)

    if st.session_state.current_df is None:
        st.session_state.current_df = df_full.copy()

    df = st.session_state.current_df
    total_questions = len(df)
    current_step = st.session_state.step

    correct_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ")
    wrong_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

    # üî≥ –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä (18 –∫–ª–µ—Ç–æ–∫)
    BAR_CELLS = 18
    html_bar = '<div style="display: flex; gap: 2px;">'
    for i in range(BAR_CELLS):
        rel_idx = int(i / BAR_CELLS * total_questions)
        if rel_idx >= total_questions:
            color = "black"
        else:
            row_index = df.iloc[rel_idx].name
            answer = next((a for a in st.session_state.answers if a["–ò–Ω–¥–µ–∫—Å"] == row_index), None)
            if answer:
                color = "green" if answer["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ" else "red"
            else:
                color = "black"
        html_bar += f'<div style="width: 20px; height: 20px; background-color: {color}; border: 1px solid #555;"></div>'
    html_bar += '</div>'

    st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")
    st.markdown(html_bar, unsafe_allow_html=True)
    st.markdown(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count} | ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {wrong_count} | ‚¨õ –û—Å—Ç–∞–ª–æ—Å—å: {total_questions - (correct_count + wrong_count)}")

    # ‚ùì –í–æ–ø—Ä–æ—Å
    if current_step < total_questions:
        row = df.iloc[current_step]
        st.markdown(f"### –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")
        st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            [f"{opt}) {text}" for opt, text in valid_options],
            key=f"q_{st.session_state.mode}_{current_step}"
        )

        if not st.session_state.show_result:
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                selected_letter = selected[0]
                is_correct = selected_letter == correct_answer

                st.session_state.selected_option = selected_letter
                st.session_state.last_result = is_correct
                st.session_state.answers.append({
                    "–†–µ–∂–∏–º": "–û—Å–Ω–æ–≤–Ω–æ–π" if st.session_state.mode == "full_test" else "–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫",
                    "–ò–Ω–¥–µ–∫—Å": row.name,
                    "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏": selected_letter,
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                })
                if is_correct:
                    st.session_state.score += 1
                st.session_state.show_result = True
                st.rerun()

        else:
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.step += 1
                st.session_state.show_result = False
                st.session_state.selected_option = None
                st.session_state.last_result = None
                st.rerun()

            if st.session_state.last_result:
                st.markdown("‚úÖ **–í–µ—Ä–Ω–æ!**")
            else:
                st.markdown(f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}**")

    # ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if current_step >= total_questions and not st.session_state.finished:
        st.session_state.finished = True
        st.success(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total_questions}")

        df_result = pd.DataFrame(st.session_state.answers)
        df_wrong = df_result[df_result["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"]

        if not df_wrong.empty:
            st.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏: {len(df_wrong)}")

            # –ö–Ω–æ–ø–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
            if st.button("üîÅ –ü—Ä–æ–π—Ç–∏ –æ—à–∏–±–∫–∏ —Å–Ω–æ–≤–∞"):
                retry_df = st.session_state.df_full[
                    st.session_state.df_full["–í–æ–ø—Ä–æ—Å"].isin(df_wrong["–í–æ–ø—Ä–æ—Å"])
                ].reset_index(drop=True)

                st.session_state.mode = "retry_wrong"
                st.session_state.step = 0
                st.session_state.score = 0
                st.session_state.show_result = False
                st.session_state.finished = False
                st.session_state.answers = []
                st.session_state.current_df = retry_df
                st.rerun()

            # –ö–Ω–æ–ø–∫–∞: —Å–∫–∞—á–∞—Ç—å CSV —Å –æ—à–∏–±–∫–∞–º–∏
            csv_buffer = StringIO()
            df_wrong.to_csv(csv_buffer, index=False)
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ CSV",
                data=csv_buffer.getvalue(),
                file_name="–æ—à–∏–±–∫–∏.csv",
                mime="text/csv"
            )
        else:
            st.balloons()
            st.success("üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

    # üìã –ò—Å—Ç–æ—Ä–∏—è
    if st.session_state.answers:
        with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            df_result = pd.DataFrame(st.session_state.answers)
            st.dataframe(df_result[["–†–µ–∂–∏–º", "–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
