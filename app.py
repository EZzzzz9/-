import streamlit as st
import pandas as pd

st.set_page_config(page_title="–¢–µ—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä—É—á–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º")

# üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
st.markdown("### üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
defaults = {
    "mode": "full_test",
    "step": 0,
    "score": 0,
    "answers": [],
    "finished": False,
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ Excel
uploaded_excel = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ CSV
uploaded_csv = st.file_uploader("(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏", type=["csv"])

df_full = None

if uploaded_excel:
    try:
        df_full = pd.read_excel(uploaded_excel, sheet_name="Sheet1")
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
        with st.expander("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
            st.dataframe(df_full)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel: {e}")
        st.stop()

elif uploaded_csv:
    try:
        csv_df = pd.read_csv(uploaded_csv)
        if all(col in csv_df.columns for col in ["–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]):
            df_full = csv_df[["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"]].drop_duplicates().reset_index(drop=True)
            for opt in ['A', 'B', 'C', 'D', 'E', 'F']:
                df_full[opt] = None  # –û—Ç–≤–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ CSV
            with st.expander("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω CSV –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"):
                st.dataframe(df_full)
        else:
            st.warning("CSV-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: –í–æ–ø—Ä–æ—Å, –í—ã –≤—ã–±—Ä–∞–ª–∏, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –†–µ–∑—É–ª—å—Ç–∞—Ç")
            st.stop()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")
        st.stop()

if df_full is not None:

    if st.session_state.current_df is None:
        st.session_state.current_df = df_full.copy()

    df = st.session_state.current_df
    total_questions = len(df)
    current_step = st.session_state.step

    correct_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ")
    wrong_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

    # üî≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ 18 HTML-–∫–ª–µ—Ç–æ–∫
    BAR_CELLS = 18
    html_bar = '<div style="display: flex; gap: 2px;">'
    for i in range(BAR_CELLS):
        relative_index = int(i / BAR_CELLS * total_questions)
        if relative_index >= total_questions:
            color = "black"
        else:
            row_index = df.iloc[relative_index].name
            answer = next((a for a in st.session_state.answers if a["–ò–Ω–¥–µ–∫—Å"] == row_index), None)
            if answer:
                color = "green" if answer["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ" else "red"
            else:
                color = "black"
        html_bar += f'<div style="width: 20px; height: 20px; background-color: {color}; border: 1px solid #555;"></div>'
    html_bar += '</div>'

    st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")
    st.markdown(html_bar, unsafe_allow_html=True)
    st.markdown(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count} | ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {wrong_count} | ‚¨õ –û—Å—Ç–∞–ª–æ—Å—å: {total_questions - (correct_count + wrong_count)}")

    if current_step < total_questions:
        row = df.iloc[current_step]
        st.markdown(f"### –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")
        st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

        if valid_options:
            selected = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                [f"{opt}) {text}" for opt, text in valid_options],
                key=f"q_{st.session_state.mode}_{current_step}"
            )

            if not st.session_state.show_result:
                if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                    selected_letter = selected[0]
                    is_correct = selected_letter == correct_answer

                    st.session_state.selected_option = selected_letter
                    st.session_state.last_result = is_correct
                    st.session_state.answers.append({
                        "–†–µ–∂–∏–º": "–û—Å–Ω–æ–≤–Ω–æ–π" if st.session_state.mode == "full_test" else "–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫",
                        "–ò–Ω–¥–µ–∫—Å": row.name,
                        "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                        "–í—ã –≤—ã–±—Ä–∞–ª–∏": selected_letter,
                        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                    })
                    if is_correct:
                        st.session_state.score += 1
                    st.session_state.show_result = True
                    st.rerun()
            else:
                if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                    st.session_state.step += 1
                    st.session_state.show_result = False
                    st.session_state.selected_option = None
                    st.session_state.last_result = None
                    st.rerun()

                if st.session_state.last_result:
                    st.markdown("‚úÖ **–í–µ—Ä–Ω–æ!**")
                else:
                    st.markdown(f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}**")
        else:
            st.warning("‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç).")

    # ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if current_step >= total_questions and not st.session_state.finished:
        st.session_state.finished = True
        st.success(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total_questions}")

        wrong_df = pd.DataFrame(st.session_state.answers)
        wrong_df = wrong_df[wrong_df["–†–µ–∑—É–ª—å—Ç–∞—Ç"] != "‚úÖ –í–µ—Ä–Ω–æ"]
        wrong_indices = wrong_df["–ò–Ω–¥–µ–∫—Å"].tolist()
        retry_df = df_full.loc[wrong_indices]

        if len(retry_df) > 0:
            st.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏: {len(retry_df)}. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Ö?")
            if st.button("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"):
                st.session_state.mode = "retry_wrong"
                st.session_state.step = 0
                st.session_state.score = 0
                st.session_state.show_result = False
                st.session_state.finished = False
                st.session_state.answers = []
                st.session_state.current_df = retry_df.reset_index(drop=True)
                st.rerun()
        else:
            st.balloons()
            st.success("üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

    # üìã –ò—Å—Ç–æ—Ä–∏—è
    if st.session_state.answers:
        with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            df_result = pd.DataFrame(st.session_state.answers)
            st.dataframe(df_result[["–†–µ–∂–∏–º", "–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel –∏–ª–∏ CSV-—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
