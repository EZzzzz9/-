import streamlit as st
import pandas as pd
import random

st.set_page_config(page_title="–¢–µ—Å—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º", layout="centered")

st.title("üìò –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö.")

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel-—Ñ–∞–π–ª–∞ ---
@st.cache_data
def load_questions(file):
    df = pd.read_excel(file, sheet_name="Sheet1")
    df = df.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
    return df

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])

# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
default_files = {
    "–°–æ–ø+–æ–±—â.xlsx": "/mnt/data/–°–æ–ø+–æ–±—â.xlsx",
    "–¢–µ—Ä+–æ–±—â.xlsx": "/mnt/data/–¢–µ—Ä+–æ–±—â.xlsx",
}
default_choice = st.selectbox("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", list(default_files.keys()))
data_file = uploaded_file if uploaded_file else default_files[default_choice]

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
questions_df = load_questions(data_file)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"):
    st.dataframe(questions_df)

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ ---
if "step" not in st.session_state:
    st.session_state.step = 0
    st.session_state.score = 0
    st.session_state.answers = []

# –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    st.session_state.step = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.experimental_rerun()

# --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
if st.session_state.step < len(questions_df):
    row = questions_df.iloc[st.session_state.step]
    st.markdown(f"### –í–æ–ø—Ä–æ—Å {st.session_state.step + 1}: {row['–í–æ–ø—Ä–æ—Å']}")

    options = ['A', 'B', 'C', 'D', 'E', 'F']
    valid_options = [(opt, str(row[opt])) for opt in options if pd.notna(row.get(opt))]
    correct_answer = row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'].strip().upper()

    answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", [f"{opt}) {text}" for opt, text in valid_options], key=st.session_state.step)

    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
        selected = answer[0]
        is_correct = selected == correct_answer
        st.session_state.answers.append({
            "question": row["–í–æ–ø—Ä–æ—Å"],
            "selected": selected,
            "correct": correct_answer,
            "result": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
        })
        if is_correct:
            st.session_state.score += 1
        st.session_state.step += 1
        st.experimental_rerun()
else:
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    st.success(f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.score} –∏–∑ {len(questions_df)}")

    with st.expander("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
        st.table(pd.DataFrame(st.session_state.answers))
