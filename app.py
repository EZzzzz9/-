import streamlit as st
import pandas as pd

st.set_page_config(page_title="–ü–æ–≤—Ç–æ—Ä –ø–æ –æ—à–∏–±–∫–∞–º", layout="centered")
st.title("üìò –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –æ—à–∏–±–∫–∞–º")

# üîÅ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    for k in list(st.session_state.keys()):
        del st.session_state[k]
    st.rerun()

# üß† –°–æ—Å—Ç–æ—è–Ω–∏—è
defaults = {
    "step": 0,
    "score": 0,
    "answers": [],
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None,
    "df_full": None,
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# –ó–∞–≥—Ä—É–∑–∫–∞ Excel
st.markdown("### üìò –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
xlsx_file = st.file_uploader("Excel (.xlsx)", type=["xlsx"], key="xlsx")

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV
st.markdown("### üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏")
csv_file = st.file_uploader("CSV (.csv)", type=["csv"], key="csv")

if xlsx_file:
    try:
        df_full = pd.read_excel(xlsx_file)
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
        df_full["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"] = df_full["–í–æ–ø—Ä–æ—Å"].astype(str).str.strip().str.lower()
        st.session_state.df_full = df_full
        st.success("‚úÖ Excel-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {e}")
        st.stop()

if csv_file and st.session_state.df_full is not None:
    try:
        df_csv = pd.read_csv(csv_file, encoding="utf-8")
        df_csv.columns = [col.strip().lower() for col in df_csv.columns]  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

        if "–≤–æ–ø—Ä–æ—Å" not in df_csv.columns:
            st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É '–í–æ–ø—Ä–æ—Å'")
            st.stop()

        df_csv["–≤–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"] = df_csv["–≤–æ–ø—Ä–æ—Å"].astype(str).str.strip().str.lower()
        df_full = st.session_state.df_full
        df_full["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"] = df_full["–í–æ–ø—Ä–æ—Å"].astype(str).str.strip().str.lower()

        df_matched = df_full[df_full["–í–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"].isin(df_csv["–≤–æ–ø—Ä–æ—Å_–Ω–æ—Ä–º"])]
        if df_matched.empty:
            st.warning("‚ùå –ù–∏ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏–∑ CSV –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel.")
            st.stop()

        st.session_state.current_df = df_matched.reset_index(drop=True)
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df_matched)} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—à–∏–±–∫–∞–º")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        st.stop()

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
df = st.session_state.current_df
if df is not None and not df.empty:
    step = st.session_state.step
    total = len(df)

    st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –í–æ–ø—Ä–æ—Å {step+1} –∏–∑ {total}")

    # üî≥ –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
    BAR_CELLS = 18
    bar_html = '<div style="display: flex; gap: 2px;">'
    for i in range(BAR_CELLS):
        rel_idx = int(i / BAR_CELLS * total)
        if rel_idx >= total:
            color = "black"
        else:
            q_index = df.iloc[rel_idx].name
            a = next((x for x in st.session_state.answers if x["–ò–Ω–¥–µ–∫—Å"] == q_index), None)
            color = "green" if a and a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ" else "red" if a else "black"
        bar_html += f'<div style="width:20px;height:20px;background-color:{color};border:1px solid #555;"></div>'
    bar_html += "</div>"
    st.markdown(bar_html, unsafe_allow_html=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    correct = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ")
    wrong = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")
    st.markdown(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct} | ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {wrong} | ‚¨õ –û—Å—Ç–∞–ª–æ—Å—å: {total - (correct + wrong)}")

    # –í–æ–ø—Ä–æ—Å
    if step < total:
        row = df.iloc[step]
        st.markdown(f"### {row['–í–æ–ø—Ä–æ—Å']}")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            [f"{opt}) {text}" for opt, text in valid_options],
            key=f"q_{step}"
        )

        if not st.session_state.show_result:
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                letter = selected[0]
                is_correct = letter == correct_answer
                st.session_state.answers.append({
                    "–ò–Ω–¥–µ–∫—Å": row.name,
                    "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏": letter,
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                })
                if is_correct:
                    st.session_state.score += 1
                st.session_state.last_result = is_correct
                st.session_state.show_result = True
                st.rerun()
        else:
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.step += 1
                st.session_state.show_result = False
                st.session_state.last_result = None
                st.rerun()

            if st.session_state.last_result:
                st.markdown("‚úÖ **–í–µ—Ä–Ω–æ!**")
            else:
                st.markdown(f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}**")

    else:
        st.success("üéâ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total}**")

        with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            df_result = pd.DataFrame(st.session_state.answers)
            st.dataframe(df_result[["–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])
else:
    st.info("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ (xlsx + csv), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
