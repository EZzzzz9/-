import streamlit as st
import pandas as pd
from io import StringIO

st.set_page_config(page_title="–¢–µ—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫")

# üîÑ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
uploaded_xlsx = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])
uploaded_csv = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type=["csv"])

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
defaults = {
    "mode": "full_test",
    "step": 0,
    "score": 0,
    "answers": [],
    "finished": False,
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None,
    "full_df": None
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞
if uploaded_xlsx:
    try:
        full_df = pd.read_excel(uploaded_xlsx)
        full_df = full_df.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
        st.session_state.full_df = full_df.copy()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        st.stop()

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV-—Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏
if uploaded_csv and st.session_state.full_df is not None:
    try:
        error_df = pd.read_csv(uploaded_csv)
        error_df = error_df[error_df["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"]
        error_questions = error_df["–í–æ–ø—Ä–æ—Å"].tolist()
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –ø–æ–ª—é "–í–æ–ø—Ä–æ—Å"
        filtered_df = st.session_state.full_df[st.session_state.full_df["–í–æ–ø—Ä–æ—Å"].isin(error_questions)].reset_index(drop=True)
        st.session_state.current_df = filtered_df.copy()
        st.session_state.mode = "retry_wrong"
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        st.stop()
elif uploaded_xlsx and st.session_state.current_df is None:
    st.session_state.current_df = st.session_state.full_df.copy()

# –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
if st.session_state.current_df is None:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
    st.stop()

df = st.session_state.current_df
total_questions = len(df)
current_step = st.session_state.step

# üî¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
correct_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ")
wrong_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

# üî≥ HTML –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä (18 –∫–ª–µ—Ç–æ–∫)
BAR_CELLS = 18
html_bar = '<div style="display: flex; gap: 2px;">'
for i in range(BAR_CELLS):
    relative_index = int(i / BAR_CELLS * total_questions)
    if relative_index >= total_questions:
        color = "black"
    else:
        row_index = df.iloc[relative_index].name
        answer = next((a for a in st.session_state.answers if a["–ò–Ω–¥–µ–∫—Å"] == row_index), None)
        if answer:
            color = "green" if answer["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ" else "red"
        else:
            color = "black"
    html_bar += f'<div style="width: 20px; height: 20px; background-color: {color}; border: 1px solid #555;"></div>'
html_bar += '</div>'

# üßæ –ü—Ä–æ–≥—Ä–µ—Å—Å
st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")
st.markdown(html_bar, unsafe_allow_html=True)
st.markdown(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count} | ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {wrong_count} | ‚¨õ –û—Å—Ç–∞–ª–æ—Å—å: {total_questions - (correct_count + wrong_count)}")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∞
if current_step < total_questions:
    row = df.iloc[current_step]
    st.markdown(f"### –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {total_questions}")
    st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

    options = ['A', 'B', 'C', 'D', 'E', 'F']
    valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
    correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

    selected = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
        [f"{opt}) {text}" for opt, text in valid_options],
        key=f"q_{st.session_state.mode}_{current_step}"
    )

    if not st.session_state.show_result:
        if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
            selected_letter = selected[0]
            is_correct = selected_letter == correct_answer

            st.session_state.selected_option = selected_letter
            st.session_state.last_result = is_correct
            st.session_state.answers.append({
                "–†–µ–∂–∏–º": "–û—Å–Ω–æ–≤–Ω–æ–π" if st.session_state.mode == "full_test" else "–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫",
                "–ò–Ω–¥–µ–∫—Å": row.name,
                "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                "–í—ã –≤—ã–±—Ä–∞–ª–∏": selected_letter,
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
            })
            if is_correct:
                st.session_state.score += 1
            st.session_state.show_result = True
            st.rerun()
    else:
        if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
            st.session_state.step += 1
            st.session_state.show_result = False
            st.session_state.selected_option = None
            st.session_state.last_result = None
            st.rerun()

        if st.session_state.last_result:
            st.markdown("‚úÖ **–í–µ—Ä–Ω–æ!**")
        else:
            st.markdown(f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}**")

# üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
if current_step >= total_questions and not st.session_state.finished:
    st.session_state.finished = True
    st.success(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total_questions}")

    wrong_df = pd.DataFrame(st.session_state.answers)
    wrong_df = wrong_df[wrong_df["–†–µ–∑—É–ª—å—Ç–∞—Ç"] != "‚úÖ –í–µ—Ä–Ω–æ"]
    wrong_indices = wrong_df["–ò–Ω–¥–µ–∫—Å"].tolist()

    if len(wrong_df) > 0:
        st.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏: {len(wrong_df)}")

        # ‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV —Å –æ—à–∏–±–∫–∞–º–∏
        csv_string = wrong_df.to_csv(index=False).encode("utf-8")
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å –æ—à–∏–±–∫–∏ (CSV)", data=csv_string, file_name="–æ—à–∏–±–∫–∏.csv", mime="text/csv")

        # üîÅ –ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫
        if st.button("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"):
            retry_df = st.session_state.full_df.loc[wrong_indices].reset_index(drop=True)
            st.session_state.mode = "retry_wrong"
            st.session_state.step = 0
            st.session_state.score = 0
            st.session_state.show_result = False
            st.session_state.finished = False
            st.session_state.answers = []
            st.session_state.current_df = retry_df
            st.rerun()
    else:
        st.balloons()
        st.success("üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

# üßæ –ò—Å—Ç–æ—Ä–∏—è
if st.session_state.answers:
    with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
        df_result = pd.DataFrame(st.session_state.answers)
        st.dataframe(df_result[["–†–µ–∂–∏–º", "–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])
