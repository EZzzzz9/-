import streamlit as st
import pandas as pd

st.set_page_config(page_title="–¢–µ—Å—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º", layout="centered")

st.title("üìò –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö.")

# --- –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É Excel-—Ñ–∞–π–ª–∞ ---
@st.cache_data
def load_questions(file):
    df = pd.read_excel(file, sheet_name="Sheet1")
    df = df.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
    return df

# --- –§–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
default_files = {
    "–°–æ–ø+–æ–±—â.xlsx": "–°–æ–ø+–æ–±—â.xlsx",
    "–¢–µ—Ä+–æ–±—â.xlsx": "–¢–µ—Ä+–æ–±—â.xlsx",
}

# --- –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π Excel-—Ñ–∞–π–ª", type=["xlsx"])
selected_default = st.selectbox("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", list(default_files.keys()))

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ ---
data_file = uploaded_file if uploaded_file else default_files[selected_default]
questions_df = load_questions(data_file)

# --- –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ ---
with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"):
    st.dataframe(questions_df)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if "step" not in st.session_state:
    st.session_state.step = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_finished = False

# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" ---
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    st.session_state.step = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_finished = False

# --- –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ ---
if st.session_state.step < len(questions_df):
    row = questions_df.iloc[st.session_state.step]
    st.markdown(f"### –í–æ–ø—Ä–æ—Å {st.session_state.step + 1} –∏–∑ {len(questions_df)}")
    st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

    options = ['A', 'B', 'C', 'D', 'E', 'F']
    valid_options = [(opt, str(row[opt])) for opt in options if pd.notna(row.get(opt))]
    correct_answer = row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'].strip().upper()

    # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", [f"{opt}) {text}" for opt, text in valid_options], key=st.session_state.step)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
        selected = answer[0]  # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞
        is_correct = selected == correct_answer

        st.session_state.answers.append({
            "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
            "–í—ã –≤—ã–±—Ä–∞–ª–∏": selected,
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
            "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
        })

        if is_correct:
            st.session_state.score += 1

        st.session_state.step += 1

# --- –ò—Ç–æ–≥ ---
if st.session_state.step >= len(questions_df) and not st.session_state.quiz_finished:
    st.session_state.quiz_finished = True
    st.success(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.score} –∏–∑ {len(questions_df)}")

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
if st.session_state.quiz_finished:
    with st.expander("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        st.table(pd.DataFrame(st.session_state.answers))
