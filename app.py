import streamlit as st
import pandas as pd

st.set_page_config(page_title="–¢–µ—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫")

# üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
defaults = {
    "step": 0,
    "score": 0,
    "answers": [],
    "finished": False,
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None,
    "df_full": None,
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
st.subheader("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
xlsx_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])
csv_file = st.file_uploader("(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –æ—à–∏–±–∫–∞–º–∏", type=["csv"])

if xlsx_file:
    try:
        df_full = pd.read_excel(xlsx_file, sheet_name=0)
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
        st.session_state.df_full = df_full
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        st.stop()

    # üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV-—Ñ–∞–π–ª–∞
    if csv_file:
        try:
            df_errors = pd.read_csv(csv_file)
            df_errors = df_errors[df_errors["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"]

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è df_full –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
            filtered_df = df_full[df_full["–í–æ–ø—Ä–æ—Å"].isin(df_errors["–í–æ–ø—Ä–æ—Å"])]
            if filtered_df.empty:
                st.warning("‚ö†Ô∏è –í CSV-—Ñ–∞–π–ª–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å Excel.")
            else:
                st.session_state.current_df = filtered_df.reset_index(drop=True)
                st.info(f"üîÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_df)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ CSV —Å –æ—à–∏–±–∫–∞–º–∏.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
            st.stop()

    # –ï—Å–ª–∏ CSV –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–æ–º
    if st.session_state.current_df is None:
        st.session_state.current_df = st.session_state.df_full.copy()

    df = st.session_state.current_df
    total_questions = len(df)
    step = st.session_state.step

    # üìä –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä HTML (18 –∫–ª–µ—Ç–æ–∫)
    BAR_CELLS = 18
    html_bar = '<div style="display: flex; gap: 2px;">'
    for i in range(BAR_CELLS):
        relative_index = int(i / BAR_CELLS * total_questions)
        if relative_index >= total_questions:
            color = "black"
        else:
            row_index = df.iloc[relative_index].name
            answer = next((a for a in st.session_state.answers if a["–ò–Ω–¥–µ–∫—Å"] == row_index), None)
            if answer:
                color = "green" if answer["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ" else "red"
            else:
                color = "black"
        html_bar += f'<div style="width: 20px; height: 20px; background-color: {color}; border: 1px solid #555;"></div>'
    html_bar += '</div>'

    correct_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚úÖ –í–µ—Ä–Ω–æ")
    wrong_count = sum(1 for a in st.session_state.answers if a["–†–µ–∑—É–ª—å—Ç–∞—Ç"] == "‚ùå –ù–µ–≤–µ—Ä–Ω–æ")

    st.markdown(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** –í–æ–ø—Ä–æ—Å {step + 1} –∏–∑ {total_questions}")
    st.markdown(html_bar, unsafe_allow_html=True)
    st.markdown(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_count} | ‚ùå –ù–µ–≤–µ—Ä–Ω–æ: {wrong_count} | ‚¨õ –û—Å—Ç–∞–ª–æ—Å—å: {total_questions - (correct_count + wrong_count)}")

    # üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if step < total_questions:
        row = df.iloc[step]
        st.markdown(f"### –í–æ–ø—Ä–æ—Å {step + 1}")
        st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row["–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"]).strip().upper()

        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            [f"{opt}) {text}" for opt, text in valid_options],
            key=f"q_{step}"
        )

        if not st.session_state.show_result:
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                selected_letter = selected[0]
                is_correct = selected_letter == correct_answer

                st.session_state.selected_option = selected_letter
                st.session_state.last_result = is_correct
                st.session_state.answers.append({
                    "–ò–Ω–¥–µ–∫—Å": row.name,
                    "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏": selected_letter,
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                })
                if is_correct:
                    st.session_state.score += 1
                st.session_state.show_result = True
                st.rerun()
        else:
            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.step += 1
                st.session_state.show_result = False
                st.session_state.selected_option = None
                st.session_state.last_result = None
                st.rerun()

            if st.session_state.last_result:
                st.markdown("‚úÖ **–í–µ—Ä–Ω–æ!**")
            else:
                st.markdown(f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}**")

    # ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if step >= total_questions and not st.session_state.finished:
        st.session_state.finished = True
        st.success(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total_questions}")
        st.balloons()

    # üìã –ò—Å—Ç–æ—Ä–∏—è
    if st.session_state.answers:
        with st.expander("üìÑ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            df_result = pd.DataFrame(st.session_state.answers)
            st.dataframe(df_result[["–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
