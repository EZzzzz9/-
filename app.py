import streamlit as st
import pandas as pd
import time

st.set_page_config(page_title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫")

# üîÑ –ö–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞–≤–µ—Ä—Ö—É
with st.sidebar:
    if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.experimental_rerun()

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
defaults = {
    "mode": "full_test",
    "step": 0,
    "score": 0,
    "answers": [],
    "finished": False,
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "response_time": None,
    "auto_advance_time": None,
    "current_df": None
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df_full = pd.read_excel(uploaded_file, sheet_name="Sheet1")
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.stop()

    with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        st.dataframe(df_full)

    # üìÑ –ù–∞—á–∞–ª—å–Ω—ã–π df
    if st.session_state.current_df is None:
        st.session_state.current_df = df_full.copy()

    df = st.session_state.current_df

    if st.session_state.step < len(df):
        row = df.iloc[st.session_state.step]
        st.markdown(f"### –í–æ–ø—Ä–æ—Å {st.session_state.step + 1} –∏–∑ {len(df)}")
        st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            [f"{opt}) {text}" for opt, text in valid_options],
            key=f"q_{st.session_state.mode}_{st.session_state.step}"
        )

        # –û—Ç–≤–µ—Ç
        if not st.session_state.show_result:
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                st.session_state.selected_option = selected[0]
                is_correct = st.session_state.selected_option == correct_answer
                st.session_state.last_result = is_correct

                st.session_state.answers.append({
                    "–†–µ–∂–∏–º": "–û—Å–Ω–æ–≤–Ω–æ–π" if st.session_state.mode == "full_test" else "–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫",
                    "–ò–Ω–¥–µ–∫—Å": row.name,
                    "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏": st.session_state.selected_option,
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                })

                if is_correct:
                    st.session_state.score += 1

                st.session_state.show_result = True
                st.session_state.auto_advance_time = time.time()

        # –†–µ–∑—É–ª—å—Ç–∞—Ç + –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥
        if st.session_state.show_result:
            if st.session_state.last_result:
                st.success("‚úÖ –í–µ—Ä–Ω–æ!")
            else:
                st.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

            if time.time() - st.session_state.auto_advance_time >= 1:
                st.session_state.step += 1
                st.session_state.show_result = False
                st.session_state.auto_advance_time = None
                st.experimental_rerun()

    # üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
    if st.session_state.step >= len(df) and not st.session_state.finished:
        st.session_state.finished = True
        st.success(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {len(df)}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—à–∏–±–∫–∏
        wrong_df = pd.DataFrame(st.session_state.answers)
        wrong_df = wrong_df[wrong_df["–†–µ–∑—É–ª—å—Ç–∞—Ç"] != "‚úÖ –í–µ—Ä–Ω–æ"]
        wrong_indices = wrong_df["–ò–Ω–¥–µ–∫—Å"].tolist()
        retry_df = df_full.loc[wrong_indices]

        if len(retry_df) > 0:
            st.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏: {len(retry_df)}. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Ö?")

            if st.button("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"):
                st.session_state.mode = "retry_wrong"
                st.session_state.step = 0
                st.session_state.score = 0
                st.session_state.show_result = False
                st.session_state.finished = False
                st.session_state.answers = []
                st.session_state.current_df = retry_df.reset_index(drop=True)
                st.experimental_rerun()
        else:
            st.balloons()
            st.success("üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–≤—Ç–æ—Ä–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    # –ò—Å—Ç–æ—Ä–∏—è
    if st.session_state.answers:
        with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            df_result = pd.DataFrame(st.session_state.answers)
            st.dataframe(df_result[["–†–µ–∂–∏–º", "–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
