import streamlit as st
import pandas as pd

st.set_page_config(page_title="–¢–µ—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–æ–º –æ—à–∏–±–æ–∫", layout="centered")
st.title("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä—É—á–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º")

# üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
with st.sidebar:
    if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
defaults = {
    "mode": "full_test",
    "step": 0,
    "score": 0,
    "answers": [],
    "finished": False,
    "show_result": False,
    "selected_option": None,
    "last_result": None,
    "current_df": None
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", type=["xlsx"])

if uploaded_file:
    try:
        df_full = pd.read_excel(uploaded_file, sheet_name="Sheet1")
        df_full = df_full.dropna(subset=["–í–æ–ø—Ä–æ—Å", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        st.stop()

    with st.expander("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
        st.dataframe(df_full)

    if st.session_state.current_df is None:
        st.session_state.current_df = df_full.copy()

    df = st.session_state.current_df
    total_questions = len(df)

    # üî¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –∏–∑ 18 HTML-–∫–ª–µ—Ç–æ–∫
    def render_html_progress():
        progress_html = ""
        total_cells = 18
        answered = st.session_state.answers
        filled_cells = min(len(answered), total_cells)

        for i in range(total_cells):
            if i < len(answered):
                result = answered[i]["–†–µ–∑—É–ª—å—Ç–∞—Ç"]
                color = "#4CAF50" if result == "‚úÖ –í–µ—Ä–Ω–æ" else "#F44336"
            else:
                color = "#333333"
            progress_html += f'<div style="width: 20px; height: 20px; background-color: {color}; margin: 2px; display: inline-block;"></div>'
        st.markdown(progress_html, unsafe_allow_html=True)

    render_html_progress()
    mode_label = "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç" if st.session_state.mode == "full_test" else "–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫"
    st.markdown(f"**–†–µ–∂–∏–º:** {mode_label} ‚Äî –í–æ–ø—Ä–æ—Å {st.session_state.step + 1} –∏–∑ {total_questions}")

    if st.session_state.step < total_questions:
        row = df.iloc[st.session_state.step]
        st.markdown(f"**{row['–í–æ–ø—Ä–æ—Å']}**")

        options = ['A', 'B', 'C', 'D', 'E', 'F']
        valid_options = [(opt, str(row.get(opt))) for opt in options if pd.notna(row.get(opt))]
        correct_answer = str(row['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç']).strip().upper()

        selected = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            [f"{opt}) {text}" for opt, text in valid_options],
            key=f"q_{st.session_state.mode}_{st.session_state.step}"
        )

        if not st.session_state.show_result:
            if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
                st.session_state.selected_option = selected[0]
                is_correct = st.session_state.selected_option == correct_answer
                st.session_state.last_result = is_correct

                st.session_state.answers.append({
                    "–†–µ–∂–∏–º": "–û—Å–Ω–æ–≤–Ω–æ–π" if st.session_state.mode == "full_test" else "–ü–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫",
                    "–ò–Ω–¥–µ–∫—Å": row.name,
                    "–í–æ–ø—Ä–æ—Å": row["–í–æ–ø—Ä–æ—Å"],
                    "–í—ã –≤—ã–±—Ä–∞–ª–∏": st.session_state.selected_option,
                    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç": correct_answer,
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": "‚úÖ –í–µ—Ä–Ω–æ" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
                })

                if is_correct:
                    st.session_state.score += 1

                st.session_state.show_result = True
                st.rerun()

        else:
            if st.session_state.last_result:
                st.success("‚úÖ –í–µ—Ä–Ω–æ!")
            else:
                st.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

            if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                st.session_state.step += 1
                st.session_state.selected_option = None
                st.session_state.last_result = None
                st.session_state.show_result = False
                st.rerun()

    if st.session_state.step >= total_questions and not st.session_state.finished:
        st.session_state.finished = True
        st.success(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {st.session_state.score} –∏–∑ {total_questions}")

        wrong_df = pd.DataFrame(st.session_state.answers)
        wrong_df = wrong_df[wrong_df["–†–µ–∑—É–ª—å—Ç–∞—Ç"] != "‚úÖ –í–µ—Ä–Ω–æ"]
        wrong_indices = wrong_df["–ò–Ω–¥–µ–∫—Å"].tolist()
        retry_df = df_full.loc[wrong_indices]

        if len(retry_df) > 0:
            st.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏: {len(retry_df)}. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Ö?")

            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—à–∏–±–∫–∏ (CSV)",
                data=retry_df.to_csv(index=False).encode("utf-8"),
                file_name="–æ—à–∏–±–∫–∏_–¥–ª—è_–ø–æ–≤—Ç–æ—Ä–∞.csv",
                mime="text/csv"
            )

            if st.session_state.step >= len(retry_df):
                st.session_state.step = 0  # –∑–∞—â–∏—Ç–∞

            if st.button("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏"):
                st.session_state.mode = "retry_wrong"
                st.session_state.step = 0
                st.session_state.score = 0
                st.session_state.show_result = False
                st.session_state.finished = False
                st.session_state.answers = []
                st.session_state.current_df = retry_df.reset_index(drop=True)
                st.rerun()
        else:
            st.balloons()
            st.success("üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

    # üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    if st.session_state.answers:
        df_result = pd.DataFrame(st.session_state.answers)
        with st.expander("üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
            st.dataframe(df_result[["–†–µ–∂–∏–º", "–í–æ–ø—Ä–æ—Å", "–í—ã –≤—ã–±—Ä–∞–ª–∏", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]])

        with st.expander("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
            stat = df_result.groupby("–†–µ–∂–∏–º")["–†–µ–∑—É–ª—å—Ç–∞—Ç"].value_counts().unstack(fill_value=0)
            st.write(stat)
else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
